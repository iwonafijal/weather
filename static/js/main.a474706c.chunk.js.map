{"version":3,"sources":["img/bg2.jpg","components/GlobalStyle.js","components/Weather.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","bg2","StyledContainer","styled","div","StyledBox","StyledSearchContainer","StyledWeatherInfo","StyledWeatherLocation","StyledWeatherConditions","Weather","useState","weather","setWeather","input","setInput","isCelsius","setIsCelsius","useEffect","axios","get","process","then","data","console","log","catch","err","onChange","e","target","value","type","placeholder","onClick","location","name","country","current","last_updated","condition","text","src","icon","alt","temp_c","temp_f","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAAe,MAA0B,gCCoE1BA,EAjEKC,YAAH,yrCAkBWC,G,8BCwDtBC,EAAkBC,IAAOC,IAAV,+IAQfC,EAAYF,IAAOC,IAAV,8SAcTE,EAAwBH,IAAOC,IAAV,uKASrBG,EAAoBJ,IAAOC,IAAV,uGAQjBI,EAAwBL,IAAOC,IAAV,4JAUrBK,EAA0BN,IAAOC,IAAV,0UAsBdM,EAhJC,WAAO,IAAD,EACUC,mBAAS,MADnB,mBACbC,EADa,KACJC,EADI,OAEMF,mBAAS,IAFf,mBAEbG,EAFa,KAENC,EAFM,OAGcJ,oBAAS,GAHvB,mBAGbK,EAHa,KAGFC,EAHE,KAKpBC,qBAAU,WACRC,IACGC,IADH,wDAEqDC,kCAFrD,qBAIGC,MAAK,SAACC,GACLV,EAAWU,EAAKA,MAChBC,QAAQC,IAAIF,EAAKA,SAElBG,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,QAC7B,IA2BH,OACE,eAACzB,EAAD,WACE,eAACI,EAAD,WACE,uBAAOsB,SA3BQ,SAACC,GACpBd,EAASc,EAAEC,OAAOC,QA0BiBC,KAAK,OAAOC,YAAY,SACvD,wBAAQC,QAxBQ,WACpBf,IACGC,IADH,wDAEqDC,kCAFrD,cAE4FP,IAEzFQ,MAAK,SAACC,GACLV,EAAWU,EAAKA,UAkBhB,uBAEDX,GACC,eAACP,EAAD,WACE,eAACE,EAAD,WACE,eAACC,EAAD,WACE,+BAAKI,EAAQuB,SAASC,KAAtB,OACA,6BAAKxB,EAAQuB,SAASE,aAExB,6BAAKzB,EAAQ0B,QAAQC,kBAEvB,eAAC9B,EAAD,WACE,6BAAKG,EAAQ0B,QAAQE,UAAUC,OAC/B,qBAAKC,IAAK9B,EAAQ0B,QAAQE,UAAUG,KAAMC,IAAI,YA1BtD,+BACG5B,EAAYJ,EAAQ0B,QAAQO,OAASjC,EAAQ0B,QAAQQ,OACtD,qCACC9B,EAAY,IAAM,OAyBb,mBAAGkB,QArBiB,kBAAMjB,GAAcD,IAqBxC,8BACiBA,EAAY,aAAe,uBCtDzC+B,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a474706c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg2.0282aa7c.jpg\";","import { createGlobalStyle } from \"styled-components\";\r\nimport bg2 from \"../img/bg2.jpg\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  \r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body{\r\n    color: white;\r\n    font-family: 'Raleway', sans-serif;\r\n    position: relative;    \r\n    background-size: cover;\r\n\r\n    &::after {\r\n    content: \"\";\r\n    background-image: url(${bg2});\r\n    background-size: cover;\r\n    opacity: 0.8;\r\n    filter: blur(3px);\r\n    -webkit-filter: blur(3px);\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    position: absolute;\r\n    z-index: -1;\r\n  }\r\n            \r\n  input{\r\n  border: 2px solid rgba(0, 0, 0, 0);\r\n  background-color: rgb(255 255 255 / 60%);\r\n  transition: 0.3s;\r\n  outline: none;\r\n  padding: 5px;\r\n  width: 100%;\r\n  margin-right: 40px;\r\n  transition: all 0.3s ease;\r\n  &:hover{\r\n          background-color: #d2d5d6;          \r\n      }\r\n  }\r\n  \r\n\r\n  button{\r\n    border: 2px solid rgba(0, 0, 0, 0);\r\n    background-color: rgb(255 255 255 / 60%);\r\n    outline: none;\r\n    padding: 5px;\r\n    border: none;\r\n    background-color: #6b90b4;       \r\n    cursor: pointer;        \r\n    color: white;\r\n    transition: all 0.3s ease;\r\n    width: 40%;\r\n      &:hover{\r\n          background-color: #81a4c7;          \r\n      }\r\n  }\r\n\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Weather = () => {\r\n  const [weather, setWeather] = useState(null);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isCelsius, setIsCelsius] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `http://api.weatherapi.com/v1/current.json?key=${process.env.REACT_APP_WEATHER_API}&q=Warsaw&aqi=no`\r\n      )\r\n      .then((data) => {\r\n        setWeather(data.data);\r\n        console.log(data.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  // Event\r\n  const weatherInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const searchWeather = () => {\r\n    axios\r\n      .get(\r\n        `http://api.weatherapi.com/v1/current.json?key=${process.env.REACT_APP_WEATHER_API}&q=${input}`\r\n      )\r\n      .then((data) => {\r\n        setWeather(data.data);\r\n      });\r\n  };\r\n\r\n  const renderTemperature = () => (\r\n    <h3>\r\n      {isCelsius ? weather.current.temp_c : weather.current.temp_f}\r\n      <sup>o </sup>\r\n      {isCelsius ? \"C\" : \"F\"}\r\n    </h3>\r\n  );\r\n\r\n  const toggleTemperatureUnit = () => setIsCelsius(!isCelsius);\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <StyledSearchContainer>\r\n        <input onChange={weatherInput} type=\"text\" placeholder=\"City\" />\r\n        <button onClick={searchWeather}>Search</button>\r\n      </StyledSearchContainer>\r\n      {weather && (\r\n        <StyledBox>\r\n          <StyledWeatherInfo>\r\n            <StyledWeatherLocation>\r\n              <h1>{weather.location.name},</h1>\r\n              <h2>{weather.location.country}</h2>\r\n            </StyledWeatherLocation>\r\n            <h3>{weather.current.last_updated}</h3>\r\n          </StyledWeatherInfo>\r\n          <StyledWeatherConditions>\r\n            <h2>{weather.current.condition.text}</h2>\r\n            <img src={weather.current.condition.icon} alt=\"weather\" />\r\n            {renderTemperature()}\r\n            <p onClick={toggleTemperatureUnit}>\r\n              {` Change to ${isCelsius ? \"Fahrenheit\" : \"Celsius\"}`}\r\n            </p>\r\n          </StyledWeatherConditions>\r\n        </StyledBox>\r\n      )}\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\n// styled components\r\n\r\nconst StyledContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n`;\r\n\r\nconst StyledBox = styled.div`\r\n  width: 100%;\r\n  max-width: 400px;\r\n  height: 480px;\r\n  position: relative;\r\n  text-align: center;\r\n  box-shadow: 0px 1px 4px 2px rgba(152, 152, 152, 0.32);\r\n  background: linear-gradient(\r\n    180deg,\r\n    rgba(142, 186, 210, 1) 18%,\r\n    rgba(83, 124, 150, 1) 80%\r\n  );\r\n`;\r\n\r\nconst StyledSearchContainer = styled.div`\r\n  width: 100%;\r\n  max-width: 400px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  padding-bottom: 2rem;\r\n`;\r\n\r\nconst StyledWeatherInfo = styled.div`\r\n  height: 50%;\r\n  h3 {\r\n    font-size: 1rem;\r\n    padding-top: 1rem;\r\n  }\r\n`;\r\n\r\nconst StyledWeatherLocation = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  padding: 2rem;\r\n  h1 {\r\n    font-size: 2.8rem;\r\n  }\r\n`;\r\n\r\nconst StyledWeatherConditions = styled.div`\r\n  height: 50%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  img {\r\n    width: 100%;\r\n    max-width: 150px;\r\n  }\r\n  h3 {\r\n    font-size: 1.3rem;\r\n    padding-bottom: 0.4rem;\r\n  }\r\n  sup {\r\n    font-size: 0.7rem;\r\n  }\r\n  p {\r\n    font-size: 0.8rem;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default Weather;\r\n","import GlobalStyle from \"./components/GlobalStyle\";\nimport Weather from \"./components/Weather\";\n\nfunction App() {\n  return (\n    <div>\n      <GlobalStyle />\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}